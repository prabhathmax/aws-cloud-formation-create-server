---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Deploy Jollycoding environment (excluding persistence layer and networking)"
Parameters:
  BaseDomainName:
    Type: String
    Default: jollycoding.com
    Description: "Base domain name (e.g.: test.com)"
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair to use when creating EC2 instances
  EnvironmentName:
    Type: String
    Description: "Name of the environment (e.g.: prod, dev)"
  EnvironmentType:
    Type: String
    Description: "Type of environment"
    AllowedValues:
      - prod
      - nonprod
  Subnets:
    Type: CommaDelimitedList
    Description: List of subnet in which to deploy the environment
  LoadBalancerSubnets:
    Type: CommaDelimitedList
    Description: List of subnet in which to deploy the environment
  InstanceType:
    Type: String
    Description: Type of instance to use for application servers
    AllowedValues:
      - t3.micro
      - t3.medium
      - t3.large
  LinuxImage:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which to deploy the environment

Outputs:
  DeploymentGroupName:
    Description: Name of the CodeDeploy deployment group
    Value: !Ref DeploymentGroup
    Export:
      Name: !Sub "jollycoding:envs:${EnvironmentName}:php-api:deployment-group-name"
  SearchDeploymentGroupName:
    Description: Name of the CodeDeploy deployment group
    Value: !Ref DeploymentGroup
    Export:
      Name: !Sub "jollycoding:envs:${EnvironmentName}:search:deployment-group-name"

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "jollycoding-${AWS::Region}-${EnvironmentName}-php-api-instance"
      Description: !Sub "Role for jollycoding-${AWS::Region}-${EnvironmentName}-php-api instances"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !ImportValue "jollycoding:ci:artifacts:bucket-read-only-policy-arn"
  InstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref InstanceRole
      Path: "/"
      Roles:
        - !Ref InstanceRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "jollycoding-${EnvironmentName}-php-api"
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceRoleProfile
        NetworkInterfaces:
          - AssociatePublicIpAddress: False
            DeleteOnTermination: True
            DeviceIndex: 0
            Groups:
              - !Ref InstanceSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "jollycoding-${EnvironmentName}-php-api"
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: "10"
              VolumeType: "gp2"
        EbsOptimized: False
        ImageId: !Ref LinuxImage
        InstanceType: !Ref InstanceType
        KeyName: !Ref EC2KeyPair
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash

            /usr/bin/yum update -y

            /usr/bin/wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm -O /tmp/cwagent.rpm
            /usr/bin/rpm -U /tmp/cwagent.rpm

            /usr/bin/yum install -y jq
            /usr/bin/yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

            # Install nodejs 10.x. So-so from the point of view of security
            /usr/bin/curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            /usr/bin/yum install -y nodejs
            /usr/bin/npm i -g pm2

            instance_id="$(curl --silent http://x.x.x.x/latest/dynamic/instance-identity/document | jq -r .instanceId)"
            layer="$(aws ec2 describe-tags --filters "Name=resource-id,Values=${!instance_id}" --region ${AWS::Region} --query "Tags[?Key=='jollycoding:Layer'].Value | [0]" | sed 's/\"//g')"

            echo 'paste here id_rsa.pub key' > ~/.ssh/authorized_keys

            cat << EOF > /tmp/amazon-cloudwatch-agent.json
            {
                "agent": {
                    "metrics_collection_interval": 10,
                    "run_as_user": "cwagent"
                },
                "logs": {
                    "logs_collected": {
                        "files": {
                            "collect_list": [
                                {
                                    "file_path": "/var/log/httpd/access_log*",
                                    "log_group_name": "/jollycoding/${EnvironmentName}/${!layer}/httpd/access_logs",
                                    "log_stream_name": "{instance_id}"
                                },
                                {
                                    "file_path": "/var/log/httpd/error_log*",
                                    "log_group_name": "/jollycoding/${EnvironmentName}/${!layer}/httpd/errors_logs",
                                    "log_stream_name": "{instance_id}"
                                },
                                {
                                    "file_path": "/var/www/html/storage/logs/**",
                                    "log_group_name": "/jollycoding/${EnvironmentName}/${!layer}/httpd/laravel_logs",
                                    "log_stream_name": "{instance_id}"
                                }
                            ]
                        }
                    }
                },
                "metrics": {
                    "append_dimensions": {
                        "AutoScalingGroupName": "\${!aws:AutoScalingGroupName}",
                        "ImageId": "\${!aws:ImageId}",
                        "InstanceId": "\${!aws:InstanceId}",
                        "InstanceType": "\${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                        "cpu": {
                            "measurement": [
                                "cpu_usage_idle",
                                "cpu_usage_iowait",
                                "cpu_usage_user",
                                "cpu_usage_system"
                            ],
                            "metrics_collection_interval": 10,
                            "resources": [
                                "*"
                            ],
                            "totalcpu": false
                        },
                        "disk": {
                            "measurement": [
                                "used_percent",
                                "inodes_free"
                            ],
                            "metrics_collection_interval": 10,
                            "resources": [
                                "*"
                            ]
                        },
                        "diskio": {
                            "measurement": [
                                "io_time",
                                "write_bytes",
                                "read_bytes",
                                "writes",
                                "reads"
                            ],
                            "metrics_collection_interval": 10,
                            "resources": [
                                "*"
                            ]
                        },
                        "mem": {
                            "measurement": [
                                "mem_used_percent"
                            ],
                            "metrics_collection_interval": 10
                        },
                        "netstat": {
                            "measurement": [
                                "tcp_established",
                                "tcp_time_wait"
                            ],
                            "metrics_collection_interval": 10
                        },
                        "swap": {
                            "measurement": [
                                "swap_used_percent"
                            ],
                            "metrics_collection_interval": 10
                        }
                    }
                }
            }
            EOF

            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -c file:/tmp/amazon-cloudwatch-agent.json
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a start -c file:/tmp/amazon-cloudwatch-agent.json

            /usr/bin/amazon-linux-extras install -y php7.2
            /usr/bin/yum install -y php-xml php-zip
            /usr/bin/yum install -y httpd

            cat << EOF > /etc/httpd/conf/httpd.conf
            ServerRoot "/etc/httpd"
            Listen 80
            Include conf.modules.d/*.conf
            User apache
            Group apache
            ServerAdmin root@localhost
            <Directory />
                AllowOverride none
                Require all denied
            </Directory>
            DocumentRoot "/var/www/html/public"
            <Directory "/var/www">
                AllowOverride None
                # Allow open access:
                Require all granted
            </Directory>

            <Directory "/var/www/html/public">
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
            </Directory>

            <IfModule dir_module>
                DirectoryIndex index.html
            </IfModule>

            <Files ".ht*">
                Require all denied
            </Files>

            ErrorLog "logs/error_log"

            LogLevel warn

            <IfModule log_config_module>
                LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
                LogFormat "%h %l %u %t \"%r\" %>s %b" common

                <IfModule logio_module>
                  LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
                </IfModule>

                CustomLog "logs/access_log" combined
            </IfModule>

            <IfModule mime_module>
                TypesConfig /etc/mime.types

                AddType application/x-compress .Z
                AddType application/x-gzip .gz .tgz

                AddType text/html .shtml
                AddOutputFilter INCLUDES .shtml
            </IfModule>

            AddDefaultCharset UTF-8

            <IfModule mime_magic_module>
                MIMEMagicFile conf/magic
            </IfModule>

            EnableSendfile on

            Timeout 600
            ProxyTimeout 600

            IncludeOptional conf.d/*.conf
            EOF

            /usr/bin/mkdir -p /var/www/html/public

            /usr/bin/systemctl enable httpd

            /usr/bin/systemctl restart httpd

            # Install & enable CodeDeploy agent
            yum install -y ruby
            curl https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install -o /tmp/install-codedeploy && chmod +x /tmp/install-codedeploy
            /tmp/install-codedeploy auto

  AppApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/api/uptime"
      HealthCheckPort: 80
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      Name: !Sub "jollycoding-${EnvironmentName}-php-api"
      Port: 80
      Protocol: "HTTP"
      Tags:
        - Key: Name
          Value: !Sub "jollycoding-${EnvironmentName}-php-api"
        - Key: "jollycoding:Environment"
          Value: !Sub "${EnvironmentName}"
        - Key: "jollycoding:Layer"
          Value: "php-api"
      TargetType: "instance"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "jollycoding-${EnvironmentName}-php-api"
      GroupDescription: !Sub "Security group for jollycoding-${EnvironmentName}-php-api instances"
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/8"
          FromPort: "80"
          ToPort: "80"
          IpProtocol: "tcp"
        - CidrIp: "10.0.0.0/8"
          FromPort: "22"
          ToPort: "22"
          IpProtocol: "tcp"
        - CidrIp: !ImportValue "jollycoding:networks:shared-services:vpc-vpn-cidr"
          FromPort: "22"
          ToPort: "22"
          IpProtocol: "tcp"
      Tags:
        - Key: "jollycoding:Environment"
          Value: !Sub "${EnvironmentName}"
        - Key: "jollycoding:EnvironmentType"
          Value: !Sub "${EnvironmentType}"
        - Key: "jollycoding:Layer"
          Value: "php-api"
        - Key: Name
          Value: !Sub "jollycoding-${EnvironmentName}-php-api"
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: "ipv4"
      Name: !Sub "jollycoding-${EnvironmentName}-php-api"
      Type: application
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref LoadBalancerSubnets
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 600
      Tags:
        - Key: Name
          Value: !Sub "jollycoding-${EnvironmentName}-php-api"
        - Key: "jollycoding:Environment"
          Value: !Sub "${EnvironmentName}"
        - Key: "jollycoding:EnvironmentType"
          Value: !Sub "${EnvironmentType}"
        - Key: "jollycoding:Layer"
          Value: "php-api"

  LoadBalancer80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref AppApiTargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  LoadBalancer443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref AppApiTargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Ref ApiCertificate

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "jollycoding-${EnvironmentName}-php-api-lb"
      GroupDescription: !Sub "Security group for jollycoding-${EnvironmentName}-api load balancer"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "80"
          ToPort: "80"
          IpProtocol: "tcp"
        - CidrIp: "0.0.0.0/0"
          FromPort: "443"
          ToPort: "443"
          IpProtocol: "tcp"
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
      Tags:
        - Key: "jollycoding:Environment"
          Value: !Sub "${EnvironmentName}"
        - Key: "jollycoding:EnvironmentType"
          Value: !Sub "${EnvironmentType}"
        - Key: "jollycoding:Layer"
          Value: "php-api"
        - Key: Name
          Value: !Sub "jollycoding-${EnvironmentName}-php-api-lb"
      VpcId: !Ref VpcId

  HttpdAccessLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/jollycoding/${EnvironmentName}/app/httpd/access_logs'
      RetentionInDays: 30

  HttpdErrorLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/jollycoding/${EnvironmentName}/app/httpd/error_logs'
      RetentionInDays: 30

  HttpdLaravelLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/jollycoding/${EnvironmentName}/app/httpd/laravel_logs'
      RetentionInDays: 30

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !ImportValue "jollycoding:ci:php-api:codedeploy-application"
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Sub "${EnvironmentName}"
      ServiceRoleArn: !ImportValue "jollycoding:ci:codedeploy-role-arn"
